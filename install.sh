#!/usr/bin/env bash
set -Eeuo pipefail

# ============================
# ERPNext One-Command Installer
# ============================
# - Ubuntu 22.04/24.04 LTS
# - Docker + Compose v2
# - Traefik reverse proxy w/ Let's Encrypt
# - ERPNext v15 (pinned tags)
# - Single production site, created non-interactively
#
# Repo: https://github.com/your-org/erpnext_oneclick (sample)
# License: MIT
#
# Logs to: /var/log/erpnext_oneclick.log

LOG_FILE="/var/log/erpnext_oneclick.log"
exec > >(tee -a "$LOG_FILE") 2>&1

RED=$'\e[31m'; GREEN=$'\e[32m'; YELLOW=$'\e[33m'; CYAN=$'\e[36m'; BOLD=$'\e[1m'; RESET=$'\e[0m'

ensure_root() {
  if [[ "$(id -u)" -ne 0 ]]; then
    echo "${RED}Please run as root (or with sudo).${RESET}"
    exit 1
  fi
}

trap 'echo "${RED}Error on line $LINENO. See $LOG_FILE${RESET}"' ERR

require_ubuntu() {
  . /etc/os-release
  if [[ "$ID" != "ubuntu" ]]; then
    echo "${RED}This installer targets Ubuntu. Detected: $ID${RESET}"
    exit 1
  fi
  if [[ "$VERSION_ID" != "22.04" && "$VERSION_ID" != "24.04" ]]; then
    echo "${YELLOW}Warning: Detected Ubuntu $VERSION_ID. Proceeding, but tested on 22.04/24.04.${RESET}"
  fi
}

prompt_inputs() {
  echo "${BOLD}${CYAN}==> ERPNext One-Click Setup${RESET}"
  read -rp "Primary domain (FQDN) for ERPNext (e.g., erp.example.com): " FQDN
  FQDN=${FQDN,,}
  if [[ -z "$FQDN" || "$FQDN" != *.* ]]; then
    echo "${RED}You must provide a valid FQDN (like erp.example.com).${RESET}"
    exit 1
  fi

  read -rp "Site name [press Enter to use ${FQDN}]: " SITE_NAME
  SITE_NAME=${SITE_NAME:-$FQDN}

  read -rp "Email for Let's Encrypt (urgent notices): " LE_EMAIL
  if [[ -z "$LE_EMAIL" || "$LE_EMAIL" != *"@"* ]]; then
    echo "${RED}Please provide a valid email address for Let's Encrypt.${RESET}"
    exit 1
  fi

  # Hidden password prompts with confirmation
  while true; do
    read -srp "MariaDB ROOT password (new): " DB_ROOT_PW; echo
    read -srp "Confirm MariaDB ROOT password: " DB_ROOT_PW2; echo
    [[ "$DB_ROOT_PW" == "$DB_ROOT_PW2" && -n "$DB_ROOT_PW" ]] && break || echo "${YELLOW}Passwords don't match. Try again.${RESET}"
  done

  while true; do
    read -srp "ERPNext Administrator password: " ADMIN_PW; echo
    read -srp "Confirm ERPNext Administrator password: " ADMIN_PW2; echo
    [[ "$ADMIN_PW" == "$ADMIN_PW2" && -n "$ADMIN_PW" ]] && break || echo "${YELLOW}Passwords don't match. Try again.${RESET}"
  done

  # Optional SMTP (recommended later in UI, but we support now)
  read -rp "Configure SMTP now? (y/N): " SMTP_NOW
  SMTP_NOW=${SMTP_NOW,,}
  if [[ "$SMTP_NOW" == "y" || "$SMTP_NOW" == "yes" ]]; then
    read -rp "SMTP host (e.g., smtp-relay.sendinblue.com): " SMTP_HOST
    read -rp "SMTP port (e.g., 587): " SMTP_PORT
    read -rp "SMTP login/username: " SMTP_LOGIN
    read -srp "SMTP password: " SMTP_PASSWORD; echo
    read -rp "SMTP use TLS? (y/N): " SMTP_TLS
    SMTP_TLS=${SMTP_TLS,,}
    [[ -z "$SMTP_PORT" ]] && SMTP_PORT="587"
  else
    SMTP_HOST=""; SMTP_PORT=""; SMTP_LOGIN=""; SMTP_PASSWORD=""; SMTP_TLS=""
  fi
}

install_packages() {
  echo "${BOLD}${CYAN}==> Installing dependencies (Docker, Compose, git, curl, jq)...${RESET}"
  apt-get update -y
  apt-get install -y ca-certificates curl gnupg lsb-release git jq ufw

  install -m 0755 -d /etc/apt/keyrings
  if [[ ! -f /etc/apt/keyrings/docker.gpg ]]; then
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    chmod a+r /etc/apt/keyrings/docker.gpg
  fi
  ARCH="$(dpkg --print-architecture)"
  . /etc/os-release
  echo \
    "deb [arch=${ARCH} signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
    ${VERSION_CODENAME} stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

  apt-get update -y
  apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

  systemctl enable --now docker
}

harden_firewall() {
  echo "${BOLD}${CYAN}==> Configuring UFW (allow 80/443, limit SSH, deny MySQL)...${RESET}"
  ufw allow 80/tcp || true
  ufw allow 443/tcp || true
  ufw limit 22/tcp || true
  ufw deny 3306/tcp || true
  ufw --force enable || true
}

prepare_stack() {
  echo "${BOLD}${CYAN}==> Preparing stack files...${RESET}"
  mkdir -p /opt/erpnext_stack
  cd /opt/erpnext_stack

  # Pin versions
  FRAPPE_TAG="v15.30.0"
  ERPNEXT_TAG="v15.30.0"
  MARIADB_TAG="10.6"
  REDIS_TAG="7.2-alpine"
  TRAEFIK_TAG="2.11"

  cat > .env <<EOF
# Generated by install.sh
COMPOSE_PROJECT_NAME=erpnext
ERPNEXT_SITE=${SITE_NAME}
FQDN=${FQDN}
LETSENCRYPT_EMAIL=${LE_EMAIL}

# Container image tags
FRAPPE_TAG=${FRAPPE_TAG}
ERPNEXT_TAG=${ERPNEXT_TAG}
MARIADB_TAG=${MARIADB_TAG}
REDIS_TAG=${REDIS_TAG}
TRAEFIK_TAG=${TRAEFIK_TAG}

# Secrets
MARIADB_ROOT_PASSWORD=$(printf '%q' "$DB_ROOT_PW")
ADMIN_PASSWORD=$(printf '%q' "$ADMIN_PW")

# SMTP (optional)
SMTP_HOST=${SMTP_HOST}
SMTP_PORT=${SMTP_PORT}
SMTP_LOGIN=${SMTP_LOGIN}
SMTP_PASSWORD=$(printf '%q' "${SMTP_PASSWORD}")
SMTP_USE_TLS=${SMTP_TLS}
EOF

  mkdir -p ./volumes/{traefik,lets-encrypt,mariadb,redis,sites,assets,logs}
  mkdir -p ./traefik
  cat > ./traefik/traefik_dynamic.toml <<'TOML'
[tls.options.default]
  minVersion = "VersionTLS12"
  sniStrict = true
TOML

  cat > docker-compose.yml <<'YML'
version: "3.9"

services:
  traefik:
    image: traefik:${TRAEFIK_TAG}
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.le.acme.httpchallenge=true"
      - "--certificatesresolvers.le.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.le.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "./volumes/lets-encrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik/traefik_dynamic.toml:/traefik_dynamic.toml:ro"
    labels:
      - "traefik.enable=true"
    restart: unless-stopped

  mariadb:
    image: mariadb:${MARIADB_TAG}
    environment:
      - MYSQL_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
    command: >
      mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
             --max_allowed_packet=256M --innodb-file-per-table=1
    volumes:
      - "./volumes/mariadb:/var/lib/mysql"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-p${MARIADB_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 30
    restart: unless-stopped

  redis-cache:
    image: redis:${REDIS_TAG}
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    volumes:
      - "./volumes/redis:/data"
    restart: unless-stopped

  redis-queue:
    image: redis:${REDIS_TAG}
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    restart: unless-stopped

  redis-socketio:
    image: redis:${REDIS_TAG}
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    restart: unless-stopped

  backend:
    image: frappe/erpnext-worker:${FRAPPE_TAG}
    environment:
      - FRAPPE_SITE_NAME_HEADER=${ERPNEXT_SITE}
      - MARIADB_HOST=mariadb
      - MYSQL_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
      - REDIS_CACHE=redis-cache:6379
      - REDIS_QUEUE=redis-queue:6379
      - REDIS_SOCKETIO=redis-socketio:6379
      - SOCKETIO_PORT=9000
    volumes:
      - "./volumes/sites:/home/frappe/frappe-bench/sites"
      - "./volumes/assets:/home/frappe/frappe-bench/sites/assets"
    depends_on:
      mariadb:
        condition: service_healthy
      redis-cache:
        condition: service_started
      redis-queue:
        condition: service_started
      redis-socketio:
        condition: service_started
    restart: unless-stopped

  socketio:
    image: frappe/erpnext-worker:${FRAPPE_TAG}
    command: node apps/frappe/socketio.js
    environment:
      - REDIS_SOCKETIO=redis-socketio:6379
      - SOCKETIO_PORT=9000
    depends_on:
      - backend
    restart: unless-stopped

  scheduler:
    image: frappe/erpnext-worker:${FRAPPE_TAG}
    command: bench schedule
    volumes:
      - "./volumes/sites:/home/frappe/frappe-bench/sites"
    depends_on:
      - backend
    restart: unless-stopped

  queue-short:
    image: frappe/erpnext-worker:${FRAPPE_TAG}
    command: bench worker --queue short
    volumes:
      - "./volumes/sites:/home/frappe/frappe-bench/sites"
    depends_on:
      - backend
    restart: unless-stopped

  queue-default:
    image: frappe/erpnext-worker:${FRAPPE_TAG}
    command: bench worker --queue default
    volumes:
      - "./volumes/sites:/home/frappe/frappe-bench/sites"
    depends_on:
      - backend
    restart: unless-stopped

  queue-long:
    image: frappe/erpnext-worker:${FRAPPE_TAG}
    command: bench worker --queue long
    volumes:
      - "./volumes/sites:/home/frappe/frappe-bench/sites"
    depends_on:
      - backend
    restart: unless-stopped

  nginx:
    image: frappe/erpnext-nginx:${ERPNEXT_TAG}
    environment:
      - FRAPPE_SITE_NAME_HEADER=${ERPNEXT_SITE}
      - SOCKETIO_PORT=9000
    volumes:
      - "./volumes/sites:/usr/share/nginx/html/sites"
      - "./volumes/assets:/usr/share/nginx/html/assets"
    depends_on:
      - backend
      - socketio
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.erp.rule=Host(`${FQDN}`)"
      - "traefik.http.routers.erp.entrypoints=websecure"
      - "traefik.http.routers.erp.tls.certresolver=le"
      - "traefik.http.services.erp.loadbalancer.server.port=8080"
    restart: unless-stopped

  site-creator:
    image: frappe/erpnext-worker:${FRAPPE_TAG}
    depends_on:
      mariadb:
        condition: service_healthy
      backend:
        condition: service_started
    environment:
      - SITE_NAME=${ERPNEXT_SITE}
      - DB_ROOT_USER=root
      - MYSQL_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - INSTALL_APPS=erpnext
      - MARIADB_HOST=mariadb
      - REDIS_QUEUE=redis-queue:6379
      - REDIS_CACHE=redis-cache:6379
      - REDIS_SOCKETIO=redis-socketio:6379
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_LOGIN=${SMTP_LOGIN}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_USE_TLS=${SMTP_USE_TLS}
    volumes:
      - "./volumes/sites:/home/frappe/frappe-bench/sites"
      - "./volumes/assets:/home/frappe/frappe-bench/sites/assets"
    entrypoint: ["/bin/bash", "-lc"]
    command: >
      "
      set -Eeuo pipefail
      bench version
      if [ ! -d sites/${ERPNEXT_SITE} ]; then
        echo '>> Creating site ${ERPNEXT_SITE}'
        bench new-site --no-mariadb-socket --mariadb-root-username ${DB_ROOT_USER} \
          --mariadb-root-password \"${MYSQL_ROOT_PASSWORD}\" \
          --admin-password \"${ADMIN_PASSWORD}\" ${ERPNEXT_SITE}
        echo '>> Installing ERPNext'
        bench --site ${ERPNEXT_SITE} install-app erpnext
        bench --site ${ERPNEXT_SITE} enable-scheduler
      else
        echo '>> Site already exists, skipping creation'
      fi

      if [ -n \"${SMTP_HOST}\" ] && [ -n \"${SMTP_PORT}\" ] && [ -n \"${SMTP_LOGIN}\" ] && [ -n \"${SMTP_PASSWORD}\" ]; then
        echo '>> Applying SMTP settings'
        bench --site ${ERPNEXT_SITE} set-config mail_server \"${SMTP_HOST}\"
        bench --site ${ERPNEXT_SITE} set-config mail_port \"${SMTP_PORT}\"
        bench --site ${ERPNEXT_SITE} set-config use_tls \"${SMTP_USE_TLS}\"
        bench --site ${ERPNEXT_SITE} set-config mail_login \"${SMTP_LOGIN}\"
        bench --site ${ERPNEXT_SITE} set-config mail_password \"${SMTP_PASSWORD}\"
        bench --site ${ERPNEXT_SITE} set-config auto_email_id \"${SMTP_LOGIN}\"
      fi

      echo '>> Migrating'
      bench --site ${ERPNEXT_SITE} migrate
      echo '>> Done'
      "
    restart: "no"
YML
}

bring_up() {
  echo "${BOLD}${CYAN}==> Bringing up the stack...${RESET}"
  docker compose pull
  docker compose up -d traefik mariadb redis-cache redis-queue redis-socketio backend socketio scheduler queue-short queue-default queue-long nginx

  echo "${BOLD}${CYAN}==> Creating site (one-shot job)...${RESET}"
  docker compose run --rm site-creator

  echo "${BOLD}${CYAN}==> Finalizing...${RESET}"
  docker compose ps
}

post_info() {
  echo
  echo "${GREEN}${BOLD}✓ ERPNext is deploying!${RESET}"
  echo "URL: ${BOLD}https://${FQDN}${RESET}"
  echo "Login: ${BOLD}Administrator${RESET}"
  echo "Admin password: ${BOLD}(the one you entered)${RESET}"
  echo
  echo "Stack folder: ${BOLD}/opt/erpnext_stack${RESET}"
  echo "Start/stop:   ${BOLD}cd /opt/erpnext_stack && docker compose up -d/down${RESET}"
  echo "Logs (nginx): ${BOLD}docker compose logs -f nginx${RESET}"
  echo "Logs (backend): ${BOLD}docker compose logs -f backend${RESET}"
  echo
  echo "If DNS is fresh, HTTPS may need a minute to issue via Let's Encrypt."
  echo
}

main() {
  ensure_root
  require_ubuntu
  prompt_inputs
  install_packages
  harden_firewall
  prepare_stack
  bring_up
  post_info
}

main "$@"
